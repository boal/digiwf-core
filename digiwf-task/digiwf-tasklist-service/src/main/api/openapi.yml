openapi: 3.0.1
info:
  version: ${project.version}
  title: DigiWF Task Management API
  description: API for task management.
  contact:
    name: DigiWF Team

servers:
  - description: Local
    url: http://localhost:38765/rest/

security:
  - spring_oauth: []

tags:
  - name: Tasks
    description: "API for Tasks from the task list"

paths:

  /schema/task-id/{taskId}/combined:
    parameters:
      - $ref: '#/components/parameters/TaskIdParam'
    get:
      operationId: getTaskSchema
      summary: Returns a schema for a task by task id.
      description: Returns a schema for a task by task id.
      tags:
        - Task
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskCombinedSchema"
        404:
          description: Task not found.

  /schema/id/{schemaId}/combined:
    parameters:
      - $ref: '#/components/parameters/SchemaIdParam'
    get:
      operationId: getSchema
      summary: Returns a schema for a task by schema id.
      description: Returns a schema for a task by schema id.
      tags:
        - Task
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskCombinedSchema"
        404:
          description: Schema not found.

  /tasks/id/{taskId}/with-schema:
    parameters:
      - $ref: '#/components/parameters/TaskIdParam'
    get:
      operationId: getTaskWithSchemaByTaskId
      description: Returns a task with schema by its id.
      tags:
        - Task
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskWithSchema"
        404:
          description: Task not found.

  /tasks/id/{taskId}:
    parameters:
      - $ref: '#/components/parameters/TaskIdParam'
    get:
      operationId: getTaskByTaskId
      description: Returns a task by its id.
      tags:
        - Task
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskWithDetails"
        404:
          description: Task not found.
    post:
      description: Completes task specified by id.
      operationId: completeTask
      requestBody:
        required: true
        description: Task variables to use during completion.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VariableMap"
      tags:
        - Task
      responses:
        204:
          description: Successful operation.
        404:
          description: Task not found.

  /tasks/id/{taskId}/save:
    parameters:
      - $ref: '#/components/parameters/TaskIdParam'
    post:
      description: Saves the variables for the task specified by id.
      operationId: saveTaskVariables
      requestBody:
        required: true
        description: Task variables to save.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VariableMap"
      tags:
        - Task
      responses:
        204:
          description: Successful operation.
        404:
          description: Task not found.

  /tasks/id/{taskId}/assign:
    parameters:
      - $ref: '#/components/parameters/TaskIdParam'
    post:
      description: Changes the assignee of the task.
      operationId: assignTask
      requestBody:
        required: true
        description: Task variables to save.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskAssignment"
      tags:
        - Task
      responses:
        204:
          description: Successful operation.
        404:
          description: Task not found.

  /tasks/id/{taskId}/unassign:
    parameters:
      - $ref: '#/components/parameters/TaskIdParam'
    post:
      description: Resets the assignment of the task.
      operationId: unassignTask
      tags:
        - Task
      responses:
        204:
          description: Successful operation.
        404:
          description: Task not found.

  /tasks/id/{taskId}/defer:
    parameters:
      - $ref: '#/components/parameters/TaskIdParam'
    post:
      description: Defer the task to a follow-up date.
      operationId: deferTask
      tags:
        - Task
      requestBody:
        required: true
        description: Task follow-up date.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskDeferral"
      responses:
        204:
          description: Successful operation.
        404:
          description: Task not found.

  /tasks/id/{taskId}/undefer:
    parameters:
      - $ref: '#/components/parameters/TaskIdParam'
    post:
      description: Undefer the task resetting the follow-up date.
      operationId: undeferTask
      tags:
        - Task
      responses:
        204:
          description: Successful operation.
        404:
          description: Task not found.

  /tasks/id/{taskId}/cancel:
    parameters:
      - $ref: '#/components/parameters/TaskIdParam'
    post:
      description: Cancels the execution of a user task.
      operationId: cancelTask
      tags:
        - Task
      responses:
        204:
          description: Successful operation.
        400:
          description: Task can't be cancelled.
        404:
          description: Task not found.

  /tasks/id/{taskId}/file:
    parameters:
      - $ref: '#/components/parameters/TaskIdParam'
      - $ref: '#/components/parameters/FilePathParam'
    get:
      description: Get file names for task and fieldKey
      operationId: getFileNames
      tags:
        - File
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfFilenames"

  /tasks/id/{taskId}/file/{fileName}:
    parameters:
      - $ref: '#/components/parameters/TaskIdParam'
      - $ref: '#/components/parameters/FileNameParam'
      - $ref: '#/components/parameters/FilePathParam'
      - $ref: '#/components/parameters/RequestMethodParam'
    get:
      description: Get a presigned url to load, upload or delete a file for a specific field key and file name
      operationId: getPresignedUrlForFile
      tags:
        - File
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PresignedUrl"

  /tasks/user:
    parameters:
      - $ref: '#/components/parameters/PageParam'
      - $ref: '#/components/parameters/SizeParam'
      - $ref: '#/components/parameters/QueryParam'
      - $ref: '#/components/parameters/TagParam'
      - $ref: '#/components/parameters/FollowUpParam'
      - $ref: '#/components/parameters/SortParam'
    get:
      description: Returns a list of tasks assigned to current user.
      operationId: getCurrentUserTasks
      tags:
        - Tasks
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageOfTasks"

  /tasks/group/unassigned:
    parameters:
      - $ref: '#/components/parameters/PageParam'
      - $ref: '#/components/parameters/SizeParam'
      - $ref: '#/components/parameters/QueryParam'
      - $ref: '#/components/parameters/TagParam'
      - $ref: '#/components/parameters/SortParam'
    get:
      description: Returns a list of unassigned tasks for the groups the current user is in (candidate groups).
      operationId: getUnassignedGroupTasks
      tags:
        - Tasks
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageOfTasks"

  /tasks/group/assigned:
    parameters:
      - $ref: '#/components/parameters/PageParam'
      - $ref: '#/components/parameters/SizeParam'
      - $ref: '#/components/parameters/QueryParam'
      - $ref: '#/components/parameters/TagParam'
      - $ref: '#/components/parameters/SortParam'
      - $ref: '#/components/parameters/UserIdQueryParam'
    get:
      description: Returns a list of tasks for the groups the current user is in (candidate groups) including already assigned.
      operationId: getAssignedGroupTasks
      tags:
        - Tasks
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageOfTasks"

  /user/id/{userId}:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
    get:
      description: Resolves a user by id.
      operationId: resolveUser
      tags:
        - User
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"


components:

  parameters:

    PageParam:
      name: page
      in: query
      description: Current page used index for paging operations started from zero.
      required: false
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0

    SizeParam:
      name: size
      in: query
      description: Current page size used for paging operations started from 1.
      required: false
      schema:
        type: integer
        format: int32
        default: 50
        minimum: 1
        maximum: 50

    QueryParam:
      name: query
      in: query
      description: A query string used during search, format is <field><op><value>.
      required: false
      schema:
        type: string
    TagParam:
      name: tag
      in: query
      description: A tag string used during search with the tag string, format is <field><op><value>.
      required: false
      schema:
        type: string
    UserIdQueryParam:
      name: userId
      in: query
      description: A user id string used during search with the user string.
      required: false
      schema:
        type: string

    SortParam:
      name: sort
      in: query
      description: A sort parameter, <direction><field> (direction is represented by + for asc or - for desc), asc is default.
      required: false
      schema:
        type: string

    FollowUpParam:
      name: followUp
      in: query
      description: An optional flag to include tasks with follow-up date set to a day before today.
      required: false
      schema:
        type: string
        format: date

    TaskIdParam:
      name: taskId
      in: path
      description: Task id.
      required: true
      schema:
        type: string

    SchemaIdParam:
      name: schemaId
      in: path
      description: Schema id.
      required: true
      schema:
        type: string

    UserIdParam:
      name: userId
      in: path
      description: User id.
      required: true
      schema:
        type: string

    FilePathParam:
      name: filePath
      in: query
      description: File path
      required: true
      schema:
        type: string

    FileNameParam:
      name: fileName
      in: path
      description: Filename.
      required: true
      schema:
        type: string

    RequestMethodParam:
      name: requestMethod
      in: query
      description: HTTP request method.
      required: true
      schema:
        type: string
        enum:
          - GET
          - PUT
          - POST
          - DELETE

  schemas:

    PageOfTasks:
      description: Page of tasks.
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/Task"
        pageable:
          description: Pageable object.
          type: object
          properties:
            pageNumber:
              description: The index of the page.
              type: integer
              format: int32
              minimum: 0
            pageSize:
              description: The size of the page.
              type: integer
              format: int32
              minimum: 1
            paged:
              description: Flag if the content is paged or not.
              type: boolean
            unpaged:
              description: Flag if the content is paged or not.
              type: boolean
            sort:
              description: Sort of the page.
              type: object
              properties:
                empty:
                  description: Flag if the sort is empty.
                  type: boolean
                unsorted:
                  description: Flag if the content is sorted or not.
                  type: boolean
                sorted:
                  description: Flag if the content is sorted or not.
                  type: boolean
          required:
            - pageNumber
            - pageSize
            - paged
            - unpaged
            - sort
        totalPages:
          description: Get amount of total pages.
          type: integer
          format: int32
        totalElements:
          description: Get amount of total elements.
          type: integer
          format: int32
        numberOfElements:
          description: Get amount of elements in this page.
          type: integer
          format: int32
        size:
          description: Size of the page.
          type: integer
          format: int32
        page:
          description: Index of the page.
          type: integer
          format: int32
        last:
          description: Flag indicating if this is a last page.
          type: boolean
        first:
          description: Flag indicating if this is a first page.
          type: boolean
        empty:
          description: Flag indicating if this page is empty.
          type: boolean
      required:
        - content
        - pageable
        - size
        - page
        - totalElements
        - totalPages
        - numberOfElements
        - empty
        - last
        - first

    Task:
      description: Represents a user task.
      type: object
      properties:
        id:
          description: Id of the task.
          type: string
        name:
          description: Name of the task.
          type: string
        tag:
          description: Tag of the task
          type: string
        description:
          description: Description of the task.
          type: string
        processName:
          description: Name of the process the task belongs to.
          type: string
        assignee:
          description: User id of assignee.
          type: string
        followUpDate:
          description: Follow-up date of the task.
          type: string
          format: date-time
        createTime:
          description: Create date and time of the task.
          type: string
          format: date-time
        schemaRef:
          description: Reference to schema id.
          type: string
        schemaType:
          $ref: "#/components/schemas/TaskSchemaType"
        externalLinks:
          $ref: "#/components/schemas/ExternalLinks"
      required:
        - id
        - schemaRef
        - schemaType
        - externalLinks

    TaskWithDetails:
      description: Represents a user task.
      type: object
      properties:
        id:
          description: Id of the task.
          type: string
        name:
          description: Name of the task.
          type: string
        tag:
          description: Tag of the task
          type: string
        description:
          description: Description of the task.
          type: string
        processName:
          description: Name of the process the task belongs to.
          type: string
        processInstanceId:
          description: Id of the process instance.
          type: string
        assignee:
          description: User id of assignee.
          type: string
        followUpDate:
          description: Follow-up date of the task.
          type: string
          format: date-time
        createTime:
          description: Create date and time of the task.
          type: string
          format: date-time
        schemaRef:
          description: Reference to schema id.
          type: string
        variables:
          description: Variables of the task.
          type: object
          additionalProperties:
            type: object
        cancelable:
          description: Flag indicating if a task can be cancelled.
          type: boolean
        schemaType:
          $ref: "#/components/schemas/TaskSchemaType"
        externalLinks:
          $ref: "#/components/schemas/ExternalLinks"

      required:
        - id
        - schemaRef
        - variables
        - cancelable
        - schemaType
        - externalLinks

    TaskWithSchema:
      description: Represents a user task with embedded combined schema.
      type: object
      properties:
        id:
          description: Id of the task.
          type: string
        name:
          description: Name of the task.
          type: string
        tag:
          description: Tag of the task
          type: string
        description:
          description: Description of the task.
          type: string
        processName:
          description: Name of the process the task belongs to.
          type: string
        processInstanceId:
          description: Id of the process instance.
          type: string
        assignee:
          description: User id of assignee.
          type: string
        followUpDate:
          description: Follow-up date of the task.
          type: string
          format: date-time
        createTime:
          description: Create date and time of the task.
          type: string
          format: date-time
        schema:
          description: Schema of the task.
          type: object
          additionalProperties:
            type: object
        variables:
          description: Variables of the task.
          type: object
          additionalProperties:
            type: object
        cancelable:
          description: Flag indicating if a task can be cancelled.
          type: boolean
        schemaType:
          $ref: "#/components/schemas/TaskSchemaType"
        externalLinks:
          $ref: "#/components/schemas/ExternalLinks"

      required:
        - id
        - schema
        - schemaType
        - variables
        - cancelable
        - externalLinks


    TaskSchemaType:
      description: Task schema type.
      type: string
      enum:
        - SCHEMA_BASED
        - VUETIFY_FORM_BASE
      default: SCHEMA_BASED

    TaskAssignment:
      description: Task assignment information.
      type: object
      properties:
        assignee:
          description: User id of the user to assign.
          type: string
      required:
        - assignee

    TaskDeferral:
      description: The task deferral information.
      type: object
      properties:
        followUpDate:
          description: Date until the task is deferred.
          type: string
          format: date-time
      required:
        - followUpDate

    TaskCombinedSchema:
      description: Combined schema for a user task.
      type: object
      properties:
        schemaId:
          description: Id of the schema.
          type: string
        schemaJson:
          description: JSON combining UI and Data format schema.
          type: string
      required:
        - schemaId
        - schemaJson

    VariableMap:
      description: Wrapper for variables.
      type: object
      properties:
        variables:
          description: Process variables.
          type: object
          additionalProperties: true
      required:
        - variables


    UserProfile:
      description: Profile of the user.
      type: object
      properties:
        userId:
          description: Unique user id.
          type: string
        firstName:
          description: First name.
          type: string
        lastName:
          description: Last name.
          type: string
        primaryOrgUnit:
          description: Primary organizational unit.
          type: string
      required:
        - userId
        - firstName
        - lastName
        - primaryOrgUnit

    ListOfFilenames:
      description: List of filenames.
      type: array
      items:
        type: string

    PresignedUrl:
      description: Presigned Url.
      type: string

    ExternalLinks:
      description: List of external links
      type: array
      items:
        $ref: "#/components/schemas/ExternalLink"

    ExternalLink:
      description: Represents an external link
      type: object
      properties:
        type:
          description: Type of link.
          type: string
        url:
          description: URL of the link.
          type: string
        label:
          description: Label to render.
          type: string
        htmlContent:
          description: HTML content of the element.
          type: string
        additionalParameters:
          description: Additional extension properties.
          type: object
          additionalProperties:
            type: string
      required:
        - type
  securitySchemes:
    spring_oauth:
      type: oauth2
      description: Oauth2 flow
      flows:
        password:
          authorizationUrl: 'http://keycloak:8080/auth/realms/P82/protocol/openid-connect/auth'
          tokenUrl: 'http://keycloak:8080/auth/realms/P82/protocol/openid-connect/token'
          refreshUrl: 'http://keycloak:8080/auth/realms/P82/protocol/openid-connect/token'
          scopes:
            lhm_extended: lhm_extended
